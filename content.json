{"pages":[],"posts":[{"title":"123","text":"12312313","link":"/2020/08/14/123/"},{"title":"test","text":"","link":"/2020/08/14/test/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/08/14/hello-world/"},{"title":"使用idea和maven实现JmeterJava请求","text":"Idea+maven实现Jmeter java请求在搞这个之前，去网上查过很多资料。大多是用eclipse来实现的导入相应依赖的jar包。然后导出jar文件，但是现在好多都是用ide来编辑了。因为这个去按照了最新版本的ide 发现导包有各种问题。明明导入没问题，打包也没问题但是就是报错。于是想到用maven来管理依赖。· maven 不需要写main方法可以打包。· ide maven打包可以做到一键 install clear 先了解java请求如何实现 创建工程并导入lib/ext/ApacheJMeter_java.jar lib/ext/ApacheJMeter_core.jar 创建一个类并实现JavaSamplerClient接口或继承AbstractJavaSamplerClient，并重写；这个类是从apacheJmeter_java包中继承 1234public Arguments getDefaultParameters();设置可用参数及的默认值；public void setupTest(JavaSamplerContext arg0)：每个线程测试前执行一次，做一些初始化工作；public SampleResult runTest(JavaSamplerContext arg0)：开始测试，从arg0参数可以获得参数值，执行多次依赖于设置方式；public void teardownTest(JavaSamplerContext arg0)：测试结束时调用,只执行一次； 打成jar包，放入Jmeter的/lib/ext路径下，重启Jmeter即可步骤如下 要有idea，新建java maven项目，一路next，打开后文件目录应该如下： 去maven公开仓库搜索需要依赖的jar包: https://mvnrepository.com/artifact/org.apache.jmeter/ApacheJMeter_java/5.0 选择指定版本后如下图（版本最好与Jmeter版本一致） 编辑pom文件。pom.xml文件是maven管理依赖jar的一个配置文件，有project节点，下面有artifactId+version节点是打包成功后的包名，可以自定义，如下图，在project节点下新增dependencies节点，该节点为依赖包列表节点。 把对应的maven配置参数加到dependencies节点下面 导入默认是红色代表找不到对应包文件，此时idea会自动提示，如下图(标记错了。。)，点击enable auto import 会自动从maven仓库下载对应jar文件 如果没有自动导入也不慌。ide右侧有maven选项打开，点击刷新按钮。默认选项打开只有2哥 lifecycle和plugins，导入包成功会有dependencies节点。用别的方式教程都需要导入2个jar包，一个jmeterjava 一个jmetercore，用maven 因为java的那个jar包引用了 core 所以maven会自动下载，所以会自动导入使用。打开会有对应的包内容。如下图 到这一步导入都OK了。在java路径下新建类。编写代码文件,我这里实现了一个把指定内容写到本地指定路径下的功能 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package com.lei.java.sampler;import org.apache.jmeter.config.Arguments;import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;import org.apache.jmeter.protocol.java.sampler.JavaSamplerClient;import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;import org.apache.jmeter.samplers.SampleResult;// 导入指定jar包import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;public class Request extends AbstractJavaSamplerClient implements JavaSamplerClient {// 新增参数，可\b在jmeter界面上展示 public Arguments getDefaultParameters(){ Arguments params = new Arguments(); params.addArgument(&quot;requestBody&quot;, &quot;requestBody&quot;); params.addArgument(&quot;responseBody&quot;, &quot;responseBody&quot;); params.addArgument(&quot;isWrite&quot;, &quot;是否写&quot;); params.addArgument(&quot;path&quot;, &quot;路径&quot;); params.addArgument(&quot;timeStamp&quot;, &quot;时间戳&quot;); return params; } public void setUpTest(JavaSamplerContext context) { Request.super.setupTest(context); }// 实现的方法 public SampleResult runTest(JavaSamplerContext javaSamplerContext){// 实例化请求结果的类 SampleResult result = new SampleResult(); result.sampleStart(); String isWrite = javaSamplerContext.getParameter(&quot;isWrite&quot;);// 这里可以获取到从jmeter界面上对应参数传过来的值，注意这里只能用string，也支持int之类的。看一下源码就知道了。方法不同 String filePath = &quot;../log/&quot;+javaSamplerContext.getParameter(&quot;path&quot;)+&quot;/&quot;+javaSamplerContext.getParameter(&quot;timeStamp&quot;)+&quot;.log&quot;; if(isWrite.equals(&quot;1&quot;)){ try{ String stringText = javaSamplerContext.getParameter(&quot;requestBody&quot;); File file = new File(filePath); if(!file.exists()){ file.createNewFile(); } FileWriter fileWriter = new FileWriter(file.getAbsoluteFile()); BufferedWriter bw = new BufferedWriter(fileWriter); bw.write(stringText); bw.close();// 调用方法定义请求成功 result.setSuccessful(true); result.setResponseData(stringText, &quot;utf-8&quot;); } catch (IOException e){ //logger.error(e.getMessage()); e.printStackTrace(); result.setResponseData(e.getMessage(), (String) null); result.setResponseCode(e.getClass().getSimpleName()); result.setResponseMessage(e.getMessage()); result.setSuccessful(false); } }else{ result.setSuccessful(true); return null; } result.sampleEnd(); return result; }} 代码写完后，可以自己写main方法测试一下。也可以不测试。直接打包。 点击右侧maven选项，clean 清理原来打包的内容。先双击清理一下，然后在双击install 打包。build success即为成功 ide会自动在项目目录下创建 target文件夹，包在这个文件夹下面，复制到jmeter/lib/ext/下面重启Jmeter即可 在Jmeter上面的展示，选择对应的类名称即可： 按照步骤走基本都会成功。maven仓库下载可能会比较慢。。这个暂时这样。因为maven公开仓库是国外友人的。有梯子的开全局代理可能会快。出现的截图内的项目名称，包名称，不一定符合，因为取自项目多个版本的结合。还有新建的项目。do not care","link":"/2020/08/14/%E4%BD%BF%E7%94%A8idea%E5%92%8Cmaven%E5%AE%9E%E7%8E%B0JmeterJava%E8%AF%B7%E6%B1%82/"},{"title":"解决微信7.0以上版本不信任用户证书问题","text":"首先文章解决的是安卓手机安装证书后依然无法抓包https请求。问题背景 安卓系统&gt;7.0，且应用不信任用户安装的证书文件 Fiddler证书安装到安卓根目录 下载fiddler证书到电脑上 打开命令窗口，执行以下命令，查看证书信息 1openssl x509 -inform DER -subject_hash_old -in FiddlerRoot.cer 保存上图执行命令后第一行输出内容，转换证书格式：,把上个命令第一行输入内容，命名为新文件名称+.0后缀格式 1openssl x509 -inform DER -in FiddlerRoot.cer -text &gt; e5742ab9.0 编辑输出的文件啊，把”—–BEGIN CERTIFICATE—–”到文件结束这部分移动到文件首部 执行adb命令连接手机,获取权限，把文件夹挂载为读写模式，把文件复制到证书根目录 12345678adb rootadb remountadb shell mount -o rw,remount /systemadb push e5742ab9.0 /system/etc/security/cacerts 以上就OK了。如果不放心可以cd 到对应目录，检查文件是否存在，文件权限是否与其他证书一致 证书安装OK，其他代理选项正常配置即可 Charles证书安装到安卓根目录 下载证书到电脑上 打开命令窗口执行以下命令，查看证书信息 1openssl x509 -subject_hash_old -in charles-ssl-proxying-certificate.pem 保存上图执行命令后第一行输出内容，转换证书格式：,把上个命令第一行输入内容，命名为新文件名称+.0后缀格式 1mv charles-ssl-proxying-certificate.pem e5742ab9.0 执行adb命令连接手机,获取权限，把文件夹挂载为读写模式，把文件复制到证书根目录 12345678adb rootadb remountadb shell mount -o rw,remount /systemadb push e5742ab9.0 /system/etc/security/cacerts 以上就OK了。如果不放心可以cd 到对应目录，检查文件是否存在，文件权限是否与其他证书一致 证书安装OK，其他代理选项正常配置即可 问题解决 error: no devices/emulators found或者adb: unable to connect for root: no devices/emulators found 12345adb disable-verity adb reboot # 重启然后重新按照上面的步骤操作 如果提示adb命令参数错误，找一个版本高点的adb工具包","link":"/2020/08/14/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A17-0%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%E4%B8%8D%E4%BF%A1%E4%BB%BB%E7%94%A8%E6%88%B7%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"测试","slug":"测试","link":"/tags/%E6%B5%8B%E8%AF%95/"}],"categories":[]}