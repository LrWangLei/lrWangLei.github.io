{"pages":[{"title":"categories","text":"","link":"/categories/"},{"title":"Hi","text":"","link":"/about/"}],"posts":[{"title":"Python继承super方法使用","text":"Python类继承super初始化父类init方法后仍然报错 直接看写法12345678910from unittest import TestCaseclass TestBase(TestCase): def __init__(self): # 写法1 super().__init__() # 写法2 super(TestBase, self).__init__() 父类的init方法如下： 试了好几种写法一直报错。。后面醒悟。 改成如下： 1234567class TestBase(TestCase): def __init__(self, *args, **kwargs): unittest.TestCase.__init__(self, *args, **kwargs) 完美解决","link":"/2020/09/04/Python%E7%BB%A7%E6%89%BFsuper%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/"},{"title":"ffmpeg推流工具安装","text":"","link":"/2020/09/04/ffmpeg%E6%8E%A8%E6%B5%81%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"},{"title":"idea使用Maven方式打包实现JmeterJava请求","text":"Idea+maven实现Jmeter java请求在搞这个之前，去网上查过很多资料。大多是用eclipse来实现的导入相应依赖的jar包。然后导出jar文件，但是现在好多都是用ide来编辑了。因为这个去按照了最新版本的ide 发现导包有各种问题。明明导入没问题，打包也没问题但是就是报错。于是想到用maven来管理依赖。· maven 不需要写main方法可以打包。· ide maven打包可以做到一键 install clear 先了解java请求如何实现 创建工程并导入lib/ext/ApacheJMeter_java.jar lib/ext/ApacheJMeter_core.jar 创建一个类并实现JavaSamplerClient接口或继承AbstractJavaSamplerClient，并重写；这个类是从apacheJmeter_java包中继承 1234public Arguments getDefaultParameters();设置可用参数及的默认值；public void setupTest(JavaSamplerContext arg0)：每个线程测试前执行一次，做一些初始化工作；public SampleResult runTest(JavaSamplerContext arg0)：开始测试，从arg0参数可以获得参数值，执行多次依赖于设置方式；public void teardownTest(JavaSamplerContext arg0)：测试结束时调用,只执行一次； 打成jar包，放入Jmeter的/lib/ext路径下，重启Jmeter即可步骤如下 要有idea，新建java maven项目，一路next，打开后文件目录应该如下： 去maven公开仓库搜索需要依赖的jar包: https://mvnrepository.com/artifact/org.apache.jmeter/ApacheJMeter_java/5.0 选择指定版本后如下图（版本最好与Jmeter版本一致） 编辑pom文件。pom.xml文件是maven管理依赖jar的一个配置文件，有project节点，下面有artifactId+version节点是打包成功后的包名，可以自定义，如下图，在project节点下新增dependencies节点，该节点为依赖包列表节点。 把对应的maven配置参数加到dependencies节点下面 导入默认是红色代表找不到对应包文件，此时idea会自动提示，如下图(标记错了。。)，点击enable auto import 会自动从maven仓库下载对应jar文件 如果没有自动导入也不慌。ide右侧有maven选项打开，点击刷新按钮。默认选项打开只有2哥 lifecycle和plugins，导入包成功会有dependencies节点。用别的方式教程都需要导入2个jar包，一个jmeterjava 一个jmetercore，用maven 因为java的那个jar包引用了 core 所以maven会自动下载，所以会自动导入使用。打开会有对应的包内容。如下图 到这一步导入都OK了。在java路径下新建类。编写代码文件,我这里实现了一个把指定内容写到本地指定路径下的功能 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package com.lei.java.sampler;import org.apache.jmeter.config.Arguments;import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;import org.apache.jmeter.protocol.java.sampler.JavaSamplerClient;import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;import org.apache.jmeter.samplers.SampleResult;// 导入指定jar包import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;public class Request extends AbstractJavaSamplerClient implements JavaSamplerClient {// 新增参数，可\b在jmeter界面上展示 public Arguments getDefaultParameters(){ Arguments params = new Arguments(); params.addArgument(&quot;requestBody&quot;, &quot;requestBody&quot;); params.addArgument(&quot;responseBody&quot;, &quot;responseBody&quot;); params.addArgument(&quot;isWrite&quot;, &quot;是否写&quot;); params.addArgument(&quot;path&quot;, &quot;路径&quot;); params.addArgument(&quot;timeStamp&quot;, &quot;时间戳&quot;); return params; } public void setUpTest(JavaSamplerContext context) { Request.super.setupTest(context); }// 实现的方法 public SampleResult runTest(JavaSamplerContext javaSamplerContext){// 实例化请求结果的类 SampleResult result = new SampleResult(); result.sampleStart(); String isWrite = javaSamplerContext.getParameter(&quot;isWrite&quot;);// 这里可以获取到从jmeter界面上对应参数传过来的值，注意这里只能用string，也支持int之类的。看一下源码就知道了。方法不同 String filePath = &quot;../log/&quot;+javaSamplerContext.getParameter(&quot;path&quot;)+&quot;/&quot;+javaSamplerContext.getParameter(&quot;timeStamp&quot;)+&quot;.log&quot;; if(isWrite.equals(&quot;1&quot;)){ try{ String stringText = javaSamplerContext.getParameter(&quot;requestBody&quot;); File file = new File(filePath); if(!file.exists()){ file.createNewFile(); } FileWriter fileWriter = new FileWriter(file.getAbsoluteFile()); BufferedWriter bw = new BufferedWriter(fileWriter); bw.write(stringText); bw.close();// 调用方法定义请求成功 result.setSuccessful(true); result.setResponseData(stringText, &quot;utf-8&quot;); } catch (IOException e){ //logger.error(e.getMessage()); e.printStackTrace(); result.setResponseData(e.getMessage(), (String) null); result.setResponseCode(e.getClass().getSimpleName()); result.setResponseMessage(e.getMessage()); result.setSuccessful(false); } }else{ result.setSuccessful(true); return null; } result.sampleEnd(); return result; }} 代码写完后，可以自己写main方法测试一下。也可以不测试。直接打包。 点击右侧maven选项，clean 清理原来打包的内容。先双击清理一下，然后在双击install 打包。build success即为成功 ide会自动在项目目录下创建 target文件夹，包在这个文件夹下面，复制到jmeter/lib/ext/下面重启Jmeter即可 在Jmeter上面的展示，选择对应的类名称即可： 按照步骤走基本都会成功。maven仓库下载可能会比较慢。。这个暂时这样。因为maven公开仓库是国外友人的。有梯子的开全局代理可能会快。出现的截图内的项目名称，包名称，不一定符合，因为取自项目多个版本的结合。还有新建的项目。do not care","link":"/2020/09/04/idea%E4%BD%BF%E7%94%A8Maven%E6%96%B9%E5%BC%8F%E6%89%93%E5%8C%85%E5%AE%9E%E7%8E%B0JmeterJava%E8%AF%B7%E6%B1%82/"},{"title":"Jmeter集成Jenkins压测平台","text":"环境准备 本机中Jenkins运行在centOS 7.2 为了不出其他问题可以保持一致，正常情况下别的版本也不会有什么问题 安装方式我这里是下载war包启动，有很多方便的安装不限于这一种方式 需要java环境最好是1.8 需要Jmeter包，版本不限，但是本地和远程最好都一样 负载机（slave）机器对Jenkins运行机器（master）做免密认证 所有机器内网打通，目前阿里云和腾讯云都支持的。除非不在一个区有点麻烦 免密认证下面的shell脚本可直接使用，IP列表替换一下即可。我这里都是内网IP，写几个实例也无所谓。前提所有机器有一个相同的用户名和密码。然后根据提示输入密码即可如果提示id_rsa.pub文件不存在 运行下面命令即可。 1ssh-keygen -t rsa 123456789101112131415161718#!/bin/baship=&quot;192.168.251.167192.168.251.219192.168.251.208192.168.251.223192.168.251.180192.168.251.93192.168.251.226192.168.251.160&quot;read -p &quot;请输入密码：&quot; userpasswordfor i in $ipdo sshpass -p ${userpassword} ssh-copy-id -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa.pub $idone Jenkins新建几个工具一键发送文件到所有服务器。比如把本地Jmeter发送到负载机上 Jenkins新建普通项目，添加构建参数1个文件参数，2个字符串参数。可以见截图 添加构建步骤Execute shell 123456789101112131415cat &gt; $WORKSPACE/ip.txt &lt;&lt; EOF192.168.251.139192.168.251.218192.168.251.217192.168.251.183EOFwhile read ipdo scp $WORKSPACE/$JOB_NAME root@$ip:$filePath$SeverFile_Name &amp; done &lt; ip.txtwaitecho -e &quot;time-consuming: $SECONDS seconds&quot; 保存运行即可 切割文件，并发送到远程服务器。（原来业务有券，每次压测不可重复） Jenkins新建普通项目，添加构建参数1个文件参数，2个字符串参数。可以见截图 添加构建步骤Execute shell 1234567891011121314151617181920212223242526272829303132333435363738ip=(192.168.251.217192.168.251.183192.168.251.222192.168.251.96192.168.251.140192.168.251.153192.168.251.123192.168.251.250192.168.251.38192.168.251.175192.168.251.229192.168.251.105192.168.251.76192.168.251.230192.168.251.60192.168.251.205192.168.251.240192.168.251.193#192.168.251.139#192.168.251.218)fileNum=${#ip[@]}mv file3 files.csvcp files.csv $fileName_New.csv# 此处需要python环境。把FileSplit.py放到当前workspace路径下。python FileSplit.py $fileNum $fileRows fileF files.csv# 此处0 19 因为有20台服务器。服务器数量暂时固定所以没有动态计算上面服务器个数。for i in `seq 0 19 `do scp $WORKSPACE/fileF$i.csv root@${ip[$i]}:/MCD/Jmeter/Product/$fileName_New.csv &amp;donewaitecho -e &quot;time-consuming: $SECONDS seconds&quot; 123456789101112131415161718192021222324252627282930313233343536373839# FileSplit.py# coding:utf-8from datetime import datetimeimport sysfrom os import pathdef Main():# source_dir = 'C:/Users/WL/Desktop/code/file/fileTest.csv'# target_dir = 'C:/Users/WL/Desktop/code/file/'# print(path.sep, sys.path[0]) target_dir = sys.path[0]+path.sep # 获取文件数，每个文件行数，文件名字，原文件名称 files, rows, name, source_dir = int(sys.argv[1]), int(sys.argv[2]), target_dir+sys.argv[3], sys.argv[4] # 计数器,文件后缀,存放数据 flag, index, dataList = 0, 0, [] print(&quot;切割为{0}个文件,每个文件{1}行&quot;.format(files, rows)) print(&quot;Start {}&quot;.format(&quot;=&quot;*20), datetime.now().strftime('%Y-%m-%d %H:%M:%S')) with open(source_dir, 'r') as f_source: for line in f_source: flag += 1 dataList.append(line) if flag == rows: with open(name + str(index) + &quot;.csv&quot;, 'w+') as f_target: for data in dataList: f_target.write(data) print(name + str(index) + &quot;.csv&quot;) index += 1 flag = 0 dataList = [] if index == files: break print(&quot;finish {}&quot;.format(&quot;=&quot;*20), datetime.now().strftime('%Y-%m-%d %H:%M:%S'))if __name__ == &quot;__main__&quot;: Main() 批量执行shell项目，用于批量重启Jmeter-server，以及批量修改服务器配置等 Jenkins新增普通项目，添加构建步骤Execute shell 1234567891011121314151617181920212223242526272829303132333435363738cat &gt; $WORKSPACE/ip.txt &lt;&lt; EOF192.168.251.139192.168.251.218192.168.251.217192.168.251.183192.168.251.222192.168.251.96192.168.251.140192.168.251.153192.168.251.123192.168.251.250192.168.251.38192.168.251.175192.168.251.229192.168.251.105192.168.251.76192.168.251.230192.168.251.60192.168.251.205192.168.251.240192.168.251.193EOFwhile read ipdo # 重启Jmeter，需要服务器存在AutoJmeter.sh文件，在下面提供 ssh -n -o StrictHostKeyChecking=no root@$ip &quot;sh /data/shell/AutoJmeter.sh restart&quot; &amp; # 释放linux缓存占用内存，在下面提供# ssh -n -o StrictHostKeyChecking=no root@$ip &quot;sh /data/shell/dropCaches.sh&quot; &amp; # 更改 内核信息-不了解勿用，需重启or重载生效，此处不提供# ssh -n -o StrictHostKeyChecking=no root@$ip &quot;echo 15 &gt; /proc/sys/net/ipv4/tcp_fin_timeout # 同上# echo 15 &gt; /proc/sys/net/ipv4/tcp_tw_timeoutdone &lt; ip.txtwaitecho -e &quot;time-consuming: $SECONDS seconds&quot; 1234567# dropCaches.shecho 1 &gt; /proc/sys/vm/drop_cachesecho 2 &gt; /proc/sys/vm/drop_cachesecho 3 &gt; /proc/sys/vm/drop_caches 1234567891011121314151617181920212223242526272829303132# AutoJmeter.sh# description: jmeter agentmyip=`/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d &quot;addr:&quot;`cmd=&quot;/MCD/Jmeter/bin/jmeter-server -Djava.rmi.server.hostname=$myip&quot;start(){ echo &quot;Start&quot; $myip $cmd &gt; /dev/null &amp;}stop(){ jmeter_pid=`ps aux | grep jmeter-server | grep -v grep | awk '{print $2}'` for pid in $jmeter_pid;do kill -9 $pid echo &quot;Stop&quot;$myip:$pid done}act=$1case $act in 'start') start;; 'stop') stop;; 'restart') stop sleep 2 start;; *) echo '[start|stop|restart]';;esac 上传更新Jmeter脚本到服务器 Jenkins新增普通项目，增加构建1个文件构建参数，2个字符串参数，见下图 添加构建步骤Execute shell 123456mv file $JENKINS_HOME/workspace/$filePath/$fileNamewaitecho -e &quot;time-consuming: $SECONDS seconds&quot; 保存运行就可以了。 Jenkins与Jmeter结合脚本配置Jmeter脚本要求 编写压测脚本要求：每个场景单独使用一个线程组！！！！！非常重要，1个线程组就是1个场景 测试计划下新增“用户定义的变量”，“HTTP请求默认值”，一定按照顺序来。用户定义的变量在测试计划下面第一个。第二个是HTTP请求默认值，其次才是线程组等元件 用户定义的变量新增变量有多少个场景（线程组）就新增多少个变量，变量名称对应线程组名称（全英文，不可有空格），对应的值是${__property(线程组名称,,)}，见截图 filePath,host，port，Ramp_Up，RunTime这5个变量不是线程组的名称，但是是必须的。格式见上图。Jenkins里用，后面讲。 HTTP请求默认值元件里面服务器地址写${host},端口${port}。必须要这样写！！见下图 线程组里的线程数，ramp_up，持续时间。分别写${线程组名称}，${Ramp_Up}，${RunTime}，见下图。不同线程组只是线程数不同。ramp_up,持续时间都是相同的。 参数化文件配置 确保脚本没有问题。保存即可 Jenkins配置 Jenkins新增普通项目，增加字符串参数。数量由场景（线程组）个数+4确定 把脚本里面用户定义的变量所有名称分别对应字符串参数，一个个对应上。默认值是0 host：是服务端IP或者域名地址，可以给个默认值，避免每次输入。或者改成选项参数，配置多个地址 port：服务器端口。开发没有给的，按照协议类型确认。http默认80，https默认443。 Ramp_Up：启动线程花费时间，根据场景自定义，默认0也可以 RunTime：压测脚本执行时间，单位是秒 新增构建步骤，Execute shell 123456789101112131415161718192021222324252627282930313233echo 生成当前日期date=$(date +%Y%m%d%H%M)echo 当前时间: $dateif [ ! -d &quot;$JENKINS_HOME/workspace/$JOB_NAME/Report&quot; ];thenmkdir $JENKINS_HOME/workspace/$JOB_NAME/Reportelseecho &quot;Skip&quot;fiecho 配置地址# Jenkins程序在服务器上面的路径jmxPath=/root/.jenkins/workspace/$JOB_NAME/pickup.jmx# 生成的报告路径，可在Jenkins对应项目工作空间内直接打开ReportPath=$JENKINS_HOME/workspace/$JOB_NAME/Report/$date# Jmeter运行结果文件。比较大。建议服务器重新挂个ssd磁盘专门保存。也可定期清理jtlPath=/data2/jtl/$JOB_NAME$date.jtlecho 创建日期文件夹mkdir $ReportPath# Jmeter非GUI启动命令 -nt # -l 指定日志路径，-R 负载机IP这里直接指定。不需要更改.propreties文件# 重点是 -G 参数，对应上面Jenkins所有的构建参数，格式：-GGetDish=$GetDish 这是一个参数# filePath：这里如果脚本有参数化文件。要用这个参数。-GfilePath=服务器保存参数化文件路径echo 执行Jmetercd /MCD/Jmeter/binsh jmeter.sh -nt $jmxPath -l $jtlPath -GoffLineRedeem=$offLineRedeem -GGetCouponDetail=$GetCouponDetail -GGetStoresExtra=$GetStoresExtra -GGetDynamicBaseMenuInfo=$GetDynamicBaseMenuInfo -Ghost=$host -Gport=$port -GfilePath=/MCD/Jmeter/Product/ -GGetdish=$Getdish -GOrderReview=$OrderReview -GOrderSubmit=$OrderSubmit -GOrderDetail=$OrderDetail -GonePopUp=$onePopUp -GonGoingOrder=$onGoingOrder -GGetPackageDish=$GetPackageDish -GGetSingleDish=$GetSingleDish -GGetDishToShopCar=$GetDishToShopCar -GLogin=$Login -GRamp_Up=$Ramp_Up -GRunTime=$RunTime -GhomePage=${homePage} -GLoggerTest=${LoggerTest} -GnewOrderSubmit=$newOrderSubmit -GnewOrderReview=$newOrderReview -R 192.168.251.218,192.168.251.139,192.168.251.217,192.168.251.183,192.168.251.222,192.168.251.96,192.168.251.140,192.168.251.193 -e -o $ReportPath# 输出报告路径#echo ${JENKINS_URL}view/MCD58/job/$JOB_NAME/ws/Report/$date/index.html Jenkins项目保存之后。参数都是默认运行一次（相当于初始化）。在用上传脚本的项目上传脚本。 上传脚本。启动即可压测。下图运行日志 报告查看 进入Jenkins项目内，点击工作空间（workspace）看到会有个Report文件夹和脚本，进入Report文件夹就是根据压测启动时间生成的报告文件夹，如下图 扩展记录请求日志，方便定位业务问题（稳定性压测不建议使用，beanshell动态编译运行有内存泄漏风险） 测试计划下新增beanshell后置处理器，放到最后一个线程组下面，如下图 12345678910111213141516171819202122import java.util.Date;import java.text.SimpleDateFormat;// 获取请求DataString requestData = prev.getSamplerData();// 截取requestBodyrequestData = requestData.replaceAll(&quot;data:&quot;,&quot;&quot;);requestData = requestData.replaceAll(&quot;no cookies&quot;,&quot;&quot;);requestData = requestData.replaceAll(&quot;[\\n\\\\s?]&quot;,&quot;&quot;);// 获取响应结果String lableName = prev.getSampleLabel();String responseData = prev.getResponseDataAsString().replaceAll(&quot;[\\\\n\\\\s]&quot;,&quot;&quot;);String runTime = &quot;/MCD/Jmeter/Product/log/Pickup&quot;+bsh.args[0]+&quot;.csv&quot;;SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);//设置日期格式String nowTime = df.format(new Date()); // new Date()为获取当前系统时间FileWriter fstream = new FileWriter(runTime, true);BufferedWriter out = new BufferedWriter(fstream);out.write(nowTime + lableName + &quot;requestData==&quot; + requestData + &quot;responseData==&quot; + responseData);out.write(System.getProperty(&quot;line.separator&quot;));out.close();fstream.close(); Jenkins新增普通项目，新增1个字符串参数。2个选择参数，Project和上面的beanshell中runTime参数字段的路径Pickup对应。这里查看日志可以看不同项目。通过文件夹区分。 构建步骤Execute shell 123456789101112131415cat &gt; $WORKSPACE/ip.txt &lt;&lt; EOF$SlaveIPEOFwhile read ipdo ssh -n -o StrictHostKeyChecking=no root@$ip &quot;tail -n 10000 /MCD/Jmeter/Product/log/$Project$date.csv&quot; done &lt; ip.txtwaitecho -e &quot;time-consuming: $SECONDS seconds&quot; 构建时间参数写压测执行的时间即可，格式：“201902031856”，查看构建日志即可 查看所有slaveJmeter日志。脚本报错。异常等信息 Jenkins新建普通项目，新增构建步骤Execute shell 1234567891011121314151617181920212223242526272829303132333435363738cat &gt; $WORKSPACE/ip.txt &lt;&lt; EOF#$SlaveIP192.168.251.139192.168.251.218192.168.251.217192.168.251.183192.168.251.222192.168.251.96192.168.251.140192.168.251.153192.168.251.123192.168.251.250192.168.251.38192.168.251.175192.168.251.229192.168.251.105192.168.251.76192.168.251.230192.168.251.60192.168.251.205192.168.251.240192.168.251.193EOFecho 生成当前日期date=$(date +%Y%m%d%H%M)echo 当前时间: $datemkdir $WORKSPACE/log/$datewhile read ipdo scp root@$ip:/root/jmeter-server.log $WORKSPACE/log/$date/${ip}_Jmeter_Server.log &amp;done &lt; ip.txtcp /MCD/Jmeter/bin/jmeter.log $WORKSPACE/log/$date/MasterJmeter.logwaitecho -e &quot;time-consuming: $SECONDS seconds&quot; 会在工作空间内新建一个当前时间的文件夹，把每个slave的运行日志放进去，以IP命名对应文件。 注意事项脚本内用户定义的变量名称，和线程组名称，线程数变量，Jenkins构件参数名称，Jmeter启动脚本的—G参数务必相同。不能有空格，没有任何空格。记录请求的beanshell会影响Jmeter本身性能。Jenkins打开报告如果图片空白，可以在项目内加个构件步骤 Execute system Groovy script，或者在启动Jenkins的时候加参数指定。或者启动后在Jenkins执行安全命令啥的忘记了。也可自行百度，原因是Jenkins屏蔽外部Js好像。Jenkins执行线程数量必须设置为1，Jenkins管理–系统设置–执行者数量RunTime（压测执行时间）最好不要低于10秒。原来启动的slave过多10秒可能刚刚启动完成。。。1System.setProperty(&quot;hudson.model.DirectoryBrowserSupport.CSP&quot;, &quot;&quot;) 123# 我的Jenkins启动命令。war包形式nohup java -Xms2g -Xmx2g -Dhudson.model.DirectoryBrowserSupport.CSP=&quot;sandbox; default-src 'self';&quot; -jar jenkins.war --httpPort=8002 &gt;jenkins.log 2&gt;jenkins.log &amp; 写的有点快。可能哪里图片少了或者啥。可以评论我补充一下。IP地址我就不隐藏了。都是内网ip。文件路径也不隐藏了。前公司服务器都回收过了。按照我这个改改，有点动手和百度能力都能搞好。后面有机会补充Jenkins账号管理。赋权压测给开发有机会在补充线程设置为1，压测过程中其他任务都会等待的解决方法–加Jenkins负载机，都搞好了。改天再更新怎么操作··","link":"/2020/08/18/Jmeter%E9%9B%86%E6%88%90Jenkins%E5%8E%8B%E6%B5%8B%E5%B9%B3%E5%8F%B0/"},{"title":"安卓7.0后应用不信任系统根证书","text":"安卓手机安装证书后仍然无法抓取https接口请求问题背景 安卓系统&gt;7.0，且应用不信任用户安装的证书文件 Fiddler证书安装到安卓根目录 下载fiddler证书到电脑上 打开命令窗口，执行以下命令，查看证书信息 1openssl x509 -inform DER -subject_hash_old -in FiddlerRoot.cer 保存上图执行命令后第一行输出内容，转换证书格式：,把上个命令第一行输入内容，命名为新文件名称+.0后缀格式 1openssl x509 -inform DER -in FiddlerRoot.cer -text &gt; e5742ab9.0 编辑输出的文件，把”—–BEGIN CERTIFICATE—–”到文件结束这部分移动到文件首部 执行adb命令连接手机,获取权限，把文件夹挂载为读写模式，把文件复制到证书根目录 12345678adb rootadb remountadb shell mount -o rw,remount /systemadb push e5742ab9.0 /system/etc/security/cacerts 以上就OK了。如果不放心可以cd 到对应目录，检查文件是否存在，文件权限是否与其他证书一致 证书安装OK，其他代理选项正常配置即可 Charles证书安装到安卓根目录 下载证书到电脑上 打开命令窗口执行以下命令，查看证书信息 1openssl x509 -subject_hash_old -in charles-ssl-proxying-certificate.pem 保存上图执行命令后第一行输出内容，转换证书格式：,把上个命令第一行输入内容，命名为新文件名称+.0后缀格式 1mv charles-ssl-proxying-certificate.pem e5742ab9.0 执行adb命令连接手机,获取权限，把文件夹挂载为读写模式，把文件复制到证书根目录 12345678adb rootadb remountadb shell mount -o rw,remount /systemadb push e5742ab9.0 /system/etc/security/cacerts 以上就OK了。如果不放心可以cd 到对应目录，检查文件是否存在，文件权限是否与其他证书一致 证书安装OK，其他代理选项正常配置即可 问题解决 error: no devices/emulators found或者adb: unable to connect for root: no devices/emulators found 12345adb disable-verity adb reboot # 重启然后重新按照上面的步骤操作 如果提示adb命令参数错误，找一个版本高点的adb工具包","link":"/2020/08/18/%E5%AE%89%E5%8D%937-0%E5%90%8E%E5%BA%94%E7%94%A8%E4%B8%8D%E4%BF%A1%E4%BB%BB%E7%B3%BB%E7%BB%9F%E6%A0%B9%E8%AF%81%E4%B9%A6/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"性能测试","slug":"性能测试","link":"/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"Jmeter","slug":"Jmeter","link":"/tags/Jmeter/"},{"name":"Jenkins","slug":"Jenkins","link":"/tags/Jenkins/"},{"name":"安卓","slug":"安卓","link":"/tags/%E5%AE%89%E5%8D%93/"},{"name":"测试","slug":"测试","link":"/tags/%E6%B5%8B%E8%AF%95/"},{"name":"测试工具","slug":"测试工具","link":"/tags/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"}],"categories":[{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"测试技术","slug":"测试技术","link":"/categories/%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF/"}]}